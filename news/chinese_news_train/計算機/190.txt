日月光華 -- SE精華區文章閱讀
--------------------------------------------------------------------------------
 發信人: jiachong (甲蟲), 信區: SE
標  題: [轉載]7.淨室軟件工程介紹                     jiachong 
發信站: 日月光華 (2003年04月09日12:48:22 星期三), 站內信件

【 以下文字轉載自 SE 討論區 】
【 原文由 jiachong 所發表 】
--bluefield整理

淨室軟件工程介紹
一、 淨室方法概述
1． 淨室概念
淨室（cleanroom）軟件工程室一種應用數學和統計學以經濟的方式生產高質量軟件的工
程技術。“淨室”這個詞來源於半導體工業的生產硬件的淨室。在硬件生產過程中，嚴
格的工程過程預防了缺陷的產生，而不是事後再去排除故障。淨室技術的重點在於通過
設計和測試中的質量認證來保證軟件開發的正確性。淨室方法植根於科學，它的應用可
提高軟件生產效率並獲得軟件運行可靠性，從而成為一個工程過程。淨室軟件工程有兩
個重要目標：一是開發過程的可管理性，二是使用時無失效。
2． 淨室基礎
（1） 函數理論
淨室開發方法基於數學中的函數理論。一個程序的規範就是一個函數的規範，描述了一
個程序的定義域（或輸入序列）到值域（或輸出空間）的映射。一個定義明確（well-d
efined）的函數有如下特性：完備性、一致性和正確性。
（2） 統計理論
淨室測試方法基於統計學。在軟件測試中，用於採樣的全體（population）是所有可能
使用情況的集合。其中集合中的每個元素代表系統的一種可能運行情況。統計的目的是
度量系統正確運行一個樣本的能力。因為總體是無限的，完全的測試是不可能的，所以
必須利用統計學方法來對系統性能做一個有效的推理。在淨室軟件工程中，統計測試既
可用於產品檢測，也可用於過程檢測。
（3） 淨室小組的工作
淨室是面向小組的方法。淨室開發小組完成三項主要工作：制定系統規範、開發和認證
。評審是淨室小組的一項重要工作。每個產品從最初的概念到最後形成都要經歷多次評
審。有兩種評審。一種稱為開發評審，開發評審的焦點集中於技術策略、好的想法以及
小組培訓和交流。所走工作產品的簡化是小組評審的顯著目標之一。最初的思路幾乎從
來都不是最好的，所以評審的一個關鍵目標是在規範、設計和驗證方面找到更好的思路
。第二種評審稱為驗證評審。這種評審通過形式化方法來驗證工作產品的正確性和完備
性，這些驗證通常這樣進行，設計者以口頭方式注意列舉其滿足基於函數的正確性條件
的理由。小組順序檢查每個條件，不允許有存在異議的情況。任何修改必須經過後續評
審的重新驗證。一個工作產品經過驗證評審而不再有更改的必要就被認為是正確和完備
的。
3． 淨室技術
淨室軟件工程可用如下三個關鍵技術來刻畫：
（1） 置於統計過程控制之下的增量開發
增量開發基於產品開發中受控迭代的工程原理—控制迭代。增量開發不是把整個開發過
程作為一個整體，而是將其劃分為一系列較小的、積累的增量。每個增量都時積累的，
也就是所有以前的增量加上新的工作而不斷積累。增量開發是開發小組保持對項目智能
控制的基礎。因為小組成員在任何時刻只需把注意立即終於工作的一部分，而不是一次
考慮所有的事情。
增量開發把一個淨室項目分成一個有序的開發週期序列。在每個週期完成一些用戶功能
。在每個增量開發完成時，產品的功能便可向客戶演示。這樣客戶對產品有真實的改觀
認識，他們可不受約束重新確認需求或時需求更加清晰。這將使產品在完成時雙方的不
滿程度降到最低。
（2） 基於函數的規範、設計和驗證
淨室採用的方法不僅有堅實的理論基礎，而且可操作性也很好。規範從一個外部視圖（
稱之為黑盒）開始，然後被轉化成一個狀態機視圖（稱之為狀態盒），最後由一個過程
（明盒）來實現。這些形式上不同、行為上等價的視圖統稱為盒子結構。盒子結構是基
於對象的，並支持軟件工程的關鍵原則：信息隱藏和實現分離。
（3） 統計測試和軟件認證
淨室測試方法採用統計學的基本原理，既當總體太大時必須採取抽樣的方法。首先確定
一個使用模型來代表系統所有可能使用的（一般是無限的）總體。然後由使用模型產生
測試用例。因為測使用歷史用體的一個隨機樣本，所以可得到系統預期操作性能的有效
的統計推導。使用模型是指系統使用中所有可能的情形及其發生的概率。使用模型可有
許多形式（包括馬爾可夫模型盒形式化的語法）來表示。在馬爾可夫模型中，使用模型
是一個狀態機組成，狀態之間由轉移弧線連接，轉移弧線指系統測試時可能的激勵，並
有一個概率值與之對應。概率指從給定狀態進行特定轉移的可能性大小。從起始狀態穿
過模型到終點狀態變得到了一個測試用例。
使用模型是可重用的資源，它能產生任意數目的側使用例。實際上，測試一個系統可採
用多種使用模型，對每種使用模型可採用多種概率分佈。例如，許多系統提供一些很少
使用的功能，但這些功能處理失誤的後果很嚴重，如在核電廠關閉反應堆。這種功能在
一般的使用模型中的執行概率是很小的。當集中測試這種能產生重大後果的功能時，需
要採用嚴格安全使用模型、冒險使用模型、惡意使用模型或其他特定環境使用模型。
這些技術可分開使用，也可以一起使用。採用這些技術可改進軟件生產過程。
4． 淨室過程
淨室參考模型（CRM）為淨室項目運行定義了一套完整的過程和工作產品。CRM由14個分
別對應於軟件管理、規範、開發和認證的獨立過程組成：
l 管理過程包括項目計劃、項目管理、性能改進以及工程變更。
l 規範過程包括需求分析、功能規範、使用規範、結構規範和增量計劃。
l 開發過程包括軟件再工程、增量設計和正確性驗證。
l 認證過程包括使用建模、測試計劃、統計測試和認證。]
二、 增量式開發的淨室管理
統計質量控制之下的增量式開發是軟件項目建立和保持管理控制的淨室途徑。在使用淨
室方法時，軟件產品是以一系列功能增量的形式開發的，這些增量合起來就形成了最終
的產品。最穩定的需求被首先實現。這些增量的集成是自頂向下來進行的。
1． 增量式開發的優點
（1） 進展的可見性
例用增量式開發，每一步增量實現了一個或多個最終用戶功能。每一步增量包含所有早
期的已開發的功能集機上一些新的功能；系統再逐步積累的增量中增長。例如，在早期
增量結束時，開發者可以很有信心的說：系統的20%已100%完成了，而不是推測系統已完
成了20%。
（2） 智能控制
增量時開發通過引用透明性，實現了整個系統開發過程中的智能控制。當擁有引用透明
性時，一個系統的部件無需回溯就能根據其子規範得以實現。無需重做前期增量。這種
策略有利於在一個完整系統中對每個增量進行正確性驗證。
（3） 增量系統集成
淨室增量式開發允許在整個開發生命期引用透明的用戶函數增量的連續集成。因為每一
步增量設計基於一個已驗證的子規範和前期增量已測試的接口，因此，幾乎沒有更深的
設計和接口錯誤。較好的定義增量貫穿於整個系統開發過程，系統在良好定義的增量忠
言化。測試和驗證工作始於開發週期早期。
（4） 連續質量反饋貫穿統計過程控制
已在淨室中實踐的增量式開發為統計過程控制提供了基礎。每一個淨室增量都是過程的
一個完整週期，包含規範、開發和新的用戶函數的驗證，加上到目前為止所有已完成工
作的測試。作為統計過程控制的典型，把過程的每一次反覆的性能度量與性能目標相比
較，以決定是否過程一直在控制之下（即是否正如所期望的那樣發生）。
（5） 用戶使用中不斷的功能反饋
增量式開發有助於用戶對一個進化系統的執行功能做出儘早的不斷的反饋，必要時允許
改變。因為增量執行於系統環境並代表了用戶功能的子集，早期的增量能通過用戶對系
統功能性和實用性的檢測來反饋。這種反饋有助於避免開發出實效的系統和建立用戶可
接受的最終產品。
（6） 變更的適應性
在系統需求和性努環境中增量室開發允許不可避免變更的系統適應性。在每一步增量完
成時，系統需求的積累變更所產生的影響能根據當前規範和增量設計來評估。如果變更
於將來增量相互獨立，則通常與現已存在的增量開發計劃相合並，並對進度和資源進行
可能的調整。如果變更影響已完成的增量，自頂向下修改系統開發，通常重用絕大多數
已存在的增量代碼（通常是全部），按照要求的進度和資源來進行相應調整。
（7） 進度與資源管理
項目資源在增量式開發全過程中能在可控制的方式下分配。可用進度是決定待開發的增
量數量和其規模的一個因素。在短進度中，小規模增量將有助於在增量交付與認證組織
間維持充分的時間段，允許一個有序的測試過程。然而，這將給項目開發小組設計和實
現更大、更復雜的增量帶來更多負擔。進度和複雜性的折衷能夠反映增量式開發計劃。
另外，從後續增量得到的反饋，為過程和產品性能的目標度量提供了管理，以允許在開
發和測試中對不足和意外收穫的適應。
2．增量式開發的理論基礎
淨室過程中的增量是開發技術是基於引用透明性原理的。引用透明性意味著一個表達式
所關心的唯一的事情是它的值，能用其值相等的子表達式代替。軟件增量式開發的基礎
在於為程序制定數學函數規則。這種觀點認為程序開發作為一種自頂向下的控制結構或
子函數（子規範）的函數改進過程，這種改進將導致基於對象或函數分解，或者是二者
的結合。因為引用透明性，任何精化步驟的驗證能夠與其它精化步驟相互獨立進行，這
就意味著，在系統的大部分組件寫出之前，在早期的增量中，系統的體系結構能夠被驗
證，在後期的增量中，體系結構不需重新驗證。
三、 淨室軟件規範
根據結構化編程的理論，無論多麼複雜的程序結構都可用分層結構中的三種基本控制結
構：順序，選擇和循環嵌套而成。然而，軟件系統的開發不僅僅需要系統控制流，如今
的大規模系統涉及整個企業中大量數據的存儲、檢索、傳送和處理數據的操作。在缺乏
工程基礎的系統開發中，這些操作使數據複雜性不斷積累，從而難以控制。淨室軟件規
範和設計使用了三種系統結構─黑盒、狀態盒和明盒，統稱為盒子結構。這些結構體現
了數據封裝和數據隱藏的重要概念。在逐步求精和驗證過程中開發盒子結構，並將系統
控制和數據操作結合起來。系統的開發就是把這些結構以一種可證明的方式逐層嵌套和
排序。
1． 淨室規範和設計的盒子結構
盒子結構是在規範和設計中對現實系統的外在基本屬性的功能描述。有三種盒子：黑盒
、狀態盒、明盒。這些盒子不僅展示了外部行為，而且還提高了內部可見度。黑盒確定
了一個系統或系統組件的外部行為。狀態盒則進一步指定了完成外部行為所需的狀態數
據。明盒則進一步把狀態盒具體化，它確定了完成狀態和行為的過程設計。它可是用已
有的黑盒或引入新的黑盒，這些黑盒將在以後細化（明盒由程序控制結構組成），每步
細化是根據前一步進行驗證的。這樣盒子結構將系統開發的三個方面（行為、數據和過
程的規範）分離開，但又把它們聯成一個細化和驗證的內聚過程。
（1） 黑盒行為
黑盒定義了一個系統或系統組件的外部行為。當系統接受激勵S（視為從其環境的輸入）
時，它將產生相應R（作為對其環境的輸出），響應不僅與當前激勵有關，還與到目前為
止收到的激勵有關。
黑盒行為的數學語義可寫成如下函數：
                歷史激勵→響應
簡記為          SH→R
SH表示包括當前激勵的所有歷史激勵。
黑盒定義不包含狀態數據及過程實現。它定義了僅取決於於歷史使用的能被用戶感受到
的外部可見行為。因此，黑盒關心的是從用戶角度看待系統行為的問題，而並不考慮狀
態和過程的設計。黑盒子規範定義了所有可能使用情況所需的行為。也就是說，在黑盒
規範中為所有可能的當前激勵盒歷史激勵以及它們的組合定義了正確的響應，在淨室項
目中黑盒規範的如下三個原則對高效系統開發很關鍵。
l 對系統擁有者和用戶而言，黑盒定義了他們分析和協商的所需行為，這是他們準備資
源、著手開發和測試的前提。
l 對系統開發者而言，黑盒定義了待設計和實現的所需行為。
l 對系統測試者而言，黑盒定義了在測試過程中待確認的所需行為。
（2） 狀態盒行為
狀態盒規範對系統或其組件進行初步細化，定義了狀態空間。狀態盒把激勵歷史封裝成
狀態數據，但仍沒有涉及具體過程。它把舊的狀態OS和激勵S映射到新的狀態NS和響應R
。而新的狀態在下一次變換時則變成了舊狀態。狀態盒行為的於一是一個如下的變換函
數：
（舊狀態，激勵）→（新狀態，響應）
        或簡寫為       （OS，S）→（NS,R）
        狀態盒根據黑盒來細化和驗證。狀態信息就是為了符合黑盒規範而必須保存的
激勵歷史，這樣的信息來自於黑盒，無需再定義。因為每個歷史激勵可用狀態來表示，
所以每個黑盒有意個狀態盒描述。而且，對於一個黑盒，可設計許多不同的狀態盒，因
為對一個狀態可能有多種不同的表示和訪問方法。
        狀態盒的驗證是導出相應黑盒行為並與原來的黑盒相比較看是否等價。這種導
出就是將狀態操作轉換成激勵歷史形式。
（3） 明盒行為
系統或其組件的明盒設計定義了狀態盒行為的過程。明盒是一個計算機程序或程序集，
基於程序的內部狀態OS，它接受激勵S，產生新的內部狀態NS，併產生響應R。這些過程
由基於結構化程序設計的控制結構（順序、選擇、循環，如果引入併發機制還要加上並
行結構）來定義。明盒用這些控制結構來完成新狀態和相應的計算。對於所給狀態盒可
以定義多種不同的明盒。明盒可用一個變換函數表示：
（舊狀態，激勵）→（新狀態，響應），藉助過程
        或簡記為：
（OS，S）→（NS，R），藉助過程
        明盒的過程可以重用已有的黑盒，也可在後續求精過程過程的狀態盒於明盒中
引入新的黑盒。定義明盒是一個關鍵步驟，因為它必須組織和連接處於一個盒子結構層
次的黑盒。通過定義每個黑盒用途的準確內容，這種顯式的連接有助於對項目開發保持
智能控制。另外，組建及其連接是從明盒設計中局部處理需求導出的。
        明盒的驗證是把其操作抽象成一個導出的狀態盒並與原來的狀態盒進行比較。

2． 盒子結構層次
盒子結構層次隨著逐步求精和驗證而不斷進化。一個初始黑盒可以被細化為一個狀態盒
，再細化為一個明盒。明盒的控制結構在下一個層次可以包含若干黑盒。這些黑盒可以
是相同的，也可不同，或者是幾個的組合。
3． 基於序列的規範過程
規範制訂有很多方法。基於順序的規範是指逐步構造出完備、一致和正確的黑盒和狀態
盒規範的過程。
在基於序列的規範過程中，按嚴格順序系統的舉出所有可能的激勵（歷史激勵）序列，
如按長度0，1，2…排列。因為每個序列映射到其正確的響應，所以可通過應用規約規則
辨識等價序列，當完備和一致的定義了系統以後枚舉過程結束。
四、 淨室軟件認證
統計測試時，需要開發出軟件投入運行時的使用模型，測試用例由該使用模型隨機產生
。然後按照數學和統計學模型對結果進行分析，獲取軟件的質量度量，並判斷測試的充
分性。傳統的測試方法（如白盒測試，迴歸測試）是淨室統計使用測試方法的一種補充
，因此，不必放棄該方法，不過，大量實踐表明，基於使用模型的測試更經濟有效，並
且能獲得實用軟件的高可靠性。
1． 基於使用模型的統計測試的優點
軟件系統的基於使用模型的統計測試提供了軟件產品和過程質量的度量標準，它將用於
軟件的整個生命期的管理和決策。由於使用模型是基於規範而不是基於代碼的，因此，
源於模型構築的洞察可用於產生在工程的早期階段避免出現問題的有價值的管理決策。

l 需求確認
使用模型式系統規範的外部視圖，它必須容易的被系統工程師、開發人員、客戶和終端
用戶所理解。在投入運行的環境中，當對該使用模型（包括可能的輸入、可能的輸入序
列以及期望的輸出）進行系統的評審時，接口和需求往往被簡化或明確。
l 資源和進度預測
基於一個使用模型的標準計算，為成果、進度和成本估算提供數據。
l 人工挑選非隨機測試用例
依據一定的約定或規則，通過模型檢查確定特殊的測試用例，以確保測試了特定的測試
序列。
l 自動生成測試用例
最小覆蓋的測試腳本（對模型完全覆蓋的最少測試事件）和隨機測試用例（依據使用概
率分佈）可由測試模型自動生成。模型覆蓋測試確保了在隨機測試開始之前模型的最低
功能，而且隨機測試為投入運行時的可靠性評估提供了依據。
l 有效的、高效的測試
不同的缺陷並不同等的產生失效。位於頻繁便利路徑上的缺陷比那些位於非頻繁路徑上
的缺陷更有可能導致失效。隨即測試的動機源於這樣一個簡單的事實：發現失效是根據
現場運行時失效導致故障的大致順序。測試的預算主要用來通過測試來最大限度的提高
軟件在投入運行時的可靠性。
l 聚焦測試
使用模型允許對特別序列的有偏抽樣，譬如對非頻繁使用但極為重要的功能序列抽樣。
可以為這些功能形成單獨的模型，或者對原始模型進行變換和抽樣以去處偏置。
l 量化測試管理
基於使用模型的統計測試，為決策測試是否完成或軟件是否可發佈提供了定量的標準。
期望使用（在使用模型中所表徵）與測試使用（在測試中所記錄）的統計誤差作為測試
充分性的度量值。
l 可靠性預測
在一定的統計測試協議下，測試時可以從軟件的性能中獲得預期運行性能的有效預測。
實際的測試結果（即對每一輸入的正確的和不正確的情況）作為使用模型的權重記錄下
來，並且該模型的計算結果提供了投入運行時的可靠性預測。
2． 統計測試的理論基礎
l 樣本與總體
就統計測試而言，軟件測試被看作是一個統計學方法的問題。縣產生軟件所有可能使用
的一個子集，並以這個自己所表現的性能作為依據來考慮整體使用性能。換句話說，就
是通過樣本來描述總體。
作為一個出發點，這種類比的前提是：不可能對軟件的所有可能應用都進行測試，所有
可能的使用情景將不會被徹底測試。問題的關鍵就在於如何描述使用總體以及如何形成
用例子集。如果對軟件的測試控制合理，那麼，由描述恰當的總體的一個隨機測試用例
，通過投入運行時的使用測試，我們可以得到總體的一個有效描述，而對於其他的用例
子集而言，無論多麼全面的構築都是不可能的。
l 軟件使用的隨機屬性
軟件的使用的過程被認為是一個隨機過程。序列中的下一個事件只依賴於當前而與過去
無關。
五、 與其它方法的比較
1． 淨室與CMM
CMM為軟件過程改進提供了一個良好的定義範例，在許多組織中得到了成功的應用。淨室
軟件工程為軟件規範、開發、測試和認證提供了良好的理論基礎和實踐。CMM主要關注管
理和組織方面，而淨室則主要關注技術和工程實踐方面。二者之間有相當一部分是相互
重疊的，但也有一些部分是另一方沒有涉及的。
例如，在CMM第二級的關鍵過程域中，就有一部分是在淨室的範圍之外。配置管理和子合
同管理是重要的管理問題，但是淨室沒有涉及它們。另一方面，淨室加強了軟件開發的
數學基礎以及軟件測試的統計基礎，而CMM沒有涉及這些方法的優點。
總體而言，CMM和淨室是兼容和互補的。把CMM的管理、組織能力和淨室技術結合起來是
一種強有力的過程改進方法。基於技術得淨室實踐為CMM定義的“what”提供了許多“h
ow”。
2． 淨室與面向對象
（1） 相同的特性
對於生命週期，淨室遵循增量開發而OO遵循迭代開發。這兩種方法都是試圖利用用戶反
饋和適應需求變更。
OO中的用例和淨室的使用模型都屬於使用場景（usage scenario）。這兩種方法都是在
開發的早期階段來定義出用戶視圖。它們產生的結果在設計和測試時都被使用到了。它
們都使用了狀態機表示法。
OO和淨室都使用了重用的方法。OO中的類和淨室中的公共服務是重用的基本單元。
淨室過程為面向對象開發提供了可管理性和技術嚴密性。對象從本質上來說是封裝了數
據和一系列服務的狀態機。一個淨室組件用黑盒視圖（一個對象的外部行為）、狀態盒
視圖（一個對象的封裝數據）和明盒視圖（處理外部需求和訪問封裝數據的服務）來定
義。一個淨是組件從技術上講就是一個對象。淨室盒子結構有助於產生一個完備、一致
和正確的對象行為規範。而且，盒子結構有助於定義和管理數據並且控制數據在各個對
象之間的流動。
在淨室技術中，數學形式化方法成為規範、設計、正確性驗證和認證測試的基礎。這種
成熟的形式化方法可為相對直觀的面向對象方法增加精確性和可預見性。淨室是應用工
程而非領域工程的一種方法。面向對象方法的普遍力量在於尋求某領域應用特徵的關係
和抽象。面向對象的領域分析可作為淨室應用工程的補充。
六、 結論
淨室軟件工程允許在生命週期的早期發現錯誤，這是後來的昂貴的返工的可能性降到最
低，並且加速了軟件上市時間。它使設計變得簡化，可驗證。軟件質量是靠設計和認證
來保證的，而不是測試。淨室支持原型法，面向對象和複用。這項技術室與平臺和開發
語言無關的，並且生產率很高。淨室由一系列精化和變換組成，經過這些精化和變換，
也就一步步從需求到了代碼。每一步變換都要根據前一級精化來認證，這就是錯誤減到
了最少。淨室既可以應用於新系統也可應用於已經存在的系統。

--
這個世界總會有點不公正
但是我們總能用心去平衡
※來源:·日月光華 bbs.fudan.edu.cn·FROM:[甲蟲窩]
※ 修改:·jiachong 於 03月04日20:52:13 修改本文·[FROM: 218.79.59.90]
--
※ 轉載:·日月光華 bbs.fudan.edu.cn·[FROM: 61.170.202.109]

 

--------------------------------------------------------------------------------
[返回上一頁] [本討論區]