日月光華 -- SE精華區文章閱讀
--------------------------------------------------------------------------------
 發信人: LiJohn (永久), 信區: SE
標  題: [轉載][zz]OOP語言技術比較：Java，C++，Object Pascal    
發信站: 日月光華 (2003年04月10日19:14:31 星期四), 站內信件

【 以下文字轉載自 VCL 討論區 】
【 原文由 aworm 所發表 】
OOP語言技術比較：Java，C++，Object Pascal    
     http://www.marcocantu.com
本文將主要涉及三種面嚮對象語言：Internet上最流行的語言Java，最常見的OOP語言C
++，以及Borland公司用於他們的集成開發環境Delphi中的Object Pascal。這三種語言
具有很多相同點。本文將從多個技術角度對這三種語言進行深入研究，並逐一比較。至
於哪一種語言最優秀，我不想做過多的評論，這在很大程度上取決於你究竟要做什麼。

本文假定你基本掌握了所涉及的三種語言中的一種，或者至少大體上對OOP概念有一定的
瞭解。我將會描述一些重要的語言特性，然後我會對三種語言的實現作一個比較。我不
打算舉實際的例子，我並不是要教授OOP，只是比較這些語言。
OOP關鍵特性
面向對象程序設計（OOP）並不是一種新的程序設計技術。它最早可以上溯到Simula-67
，雖然它的第一個真正完整的實現是Simula-80。在80年代下半期，OOP變得流行起來，
並且出現了許多支持OOP的語言，比如C++，Objective-C（另一種C語言擴展），Object
 PAscal和Turbo Pascal，CLOS（Lisp的面向對象擴展），Eiffel，Ada（其最新的版本
），以及最近的Java。本文將集中討論C++、Object Pascal和Java，並有限的設計其它
OOP語言。
OOP的關鍵特性是廣為人知的，在繼續下面的內容之前，我將簡單的重複一下，以便你再
熟悉一下這些通用技術。
·第一個關鍵特性是定義了類，封裝了表現和操作的抽象數據類型。在OOP語言中，類是
模塊、封裝和數據抽象的基礎。
·第二個關鍵特性是繼承，從已存在的類型中繼承元素（表現和方法），改變或擴展舊
類型的方法。
·第三個關鍵技術被稱為多態性，它允許使用類似的方法操作不同類型的對象（通常是
子類對象）。它使得類的可用性進一步提高，程序也因此更容易維護和擴展。
一種語言如果是面向對象的，必須具有類、繼承和多態這幾個特性（僅支持類而不支持
繼承和多態的語言，通常被稱為基於對象的）。不同的OOP語言可能會使用完全不同的方
法實現以上幾個特性。我們可以通過比較類型檢查機制、對不同程序設計模型的支持以
及所支持的對象模型來區別不同的OOP語言。下面我將深入語言特性的細節。
編譯期類型檢查 vs. 運行期類型檢查
類型的強壯性是評價程序設計語言的重要標準。涉及到類型檢查的內容包括對已存在的
方法的調用，方法的參數的類型，數組邊界的檢查，等等。
C++、Java和Object Pascal多或多或少的支持編譯期類型檢查，其中，C++的類型檢查最
弱，而Java的最強。原因是，C++保留了對C語言的支持，而C語言雖然支持編譯期類型檢
查，卻極其微弱。例如，C和C++認為所有數字類型都是兼容的（雖然向整型變量賦浮點
數值時編譯器會報警）。在Object Pascal和Java語言中，布爾值與整型數值不同，而字
符類型則是另一個完全不兼容的類型。
雖然Java虛擬機在運行期“翻譯”比特碼，但並不表示它放棄了編譯期類型檢查。相反
，在Java中類型檢查進行的相當徹底。另外一些OOP語言，例如Smalltalk和CLOS，則在
運行期進行類型檢查。
混合OOP語言 vs. 純OOP語言
另一個區別存在於純的和混合的OOP語言之間。純OOP語言只允許應用一種程序設計模型
：OOP。你可以聲明類和方法，但不能使用老式的普通函數、過程和全局變量。
在以上三種語言中，只有Java是純OOP語言（Eiffel和Smalltalk也是），初看上去純OO
P是個很好的主意，然而，你最終還是會使用許多靜態方法和靜態數據。除了語法更復雜
，這與使用全局函數和數據沒有任何區別。我個人的觀點是，純OOP語言對於OOP的初學
者非常有幫助，因為他將不得不使用（並學習）面向對象程序設計模型。另一方面，C+
+和Object Pascal都是典型的混合語言，他們允許程序員使用傳統的C或Pascal程序設計
方法。
要注意的是，Smalltalk大大擴展了純面向對象的概念。在Smalltalk中，所有預定義數
據類型，例如整型、字符型，甚至整個語言架構（例如循環指令）都是以對象封裝的。
這完全是出於對純理論的興趣，因為這樣極大的降低了程序的執行效率。Java沒有做得
如此絕對，它允許使用傳統的，非面向對象的數據類型（雖然它提供了對傳統類型的類
封裝）。
普通對象模型 vs. 對象引用模型
OOP語言之間存在的第三個主要區別在於它們的對象模型。一些比較傳統的OOP語言允許
程序員在棧、堆和靜態存儲區中創建對象。在這些語言中，一個類的變量（實例）對應
於內存中的一個對象。C++就是這樣工作的。
之後的OOP語言傾向於使用另一種模型，稱為對象引用模型。在這個模型中，每個對象都
動態的創建於堆中，一個類的變量實際上是一個指向內存中的對象的引用或句柄（技術
上類似於指針的某種東西）。Java和Object Pascal都採用了這種引用模型。我們很快就
會看到，採用這種模型你必須記得為對象分配內存。
類、對象和引用
·特性描述：在介紹了以上內容後，我們進入對OOP語言的討論。最好的起點是類和對象
。我希望每個人都清楚的明白這兩個名詞的區別，簡言之，一個類是一種數據類型，而
一個對象則是某個類的實例。現在我們來看看如何在基於不同對象模型的OOP語言中使用
對象。
·C++：在C++中，假設有一個類MyClass，這個類有一個方法MyMethod，我們可以寫出如
下代碼：
  MyClass Obj;
  Obj.MyMethod;
這樣就創建了一個名為Obj的MyClass類。通常C++會在棧中為這個對象分配內存空間。現
在就可以像第二行代碼那樣使用對象了。
·Java：在Java中，類似的語句只為指向對象的句柄分配內存，而不是為對象本身：
  MyClass Obj;
  Obj = new MyClass();
  Obj.MyMethod();
在你使用對象之前，必須使用“new”為對象分配內存。當然，最好在同一條語句中聲明
並初始化對象，以避免使用未被初始化的對象句柄：
  MyClass Obj = new MyClass();
  Obj.MyMethod();
·OP：Object Pascal採用大致相同的方法，但是必須在不同的語句中聲明和初始化對象
：
  var
    Obj: MyClass;
  begin
    Obj := MyClass.Create;
    Obj.MyMethod;
·注意：雖然對象引用模型似乎需要程序員寫更多的代碼，但要知道，在C++中經常需要
使用對象的指針和引用（例如只有使用指針或引用，才能獲得多態性能）。而在對象引
用模型中，指針被默認使用，但卻被巧妙的隱藏起來。特別是Java中並沒有正式的指針
，而事實上，指針無處不在。只不過程序員不能直接控制這些指針，但也因此他們不會
隨機訪問內存地址，從而使程序更加安全。
回收
·特性描述：一旦你創建並使用了一個對象，就需要銷燬它，以避免浪費內存資源。
·C++：在C++中銷燬一個儲存在棧中的對象是十分容易的。另一方面，要銷燬動態創建
的對象就困難多了。有很多解決辦法，例如引用計數和智能指針，但是這樣增加了複雜
程度。C++程序員的第一印象是使用引用對象模型來解決問題實在是太糟了。
·Java：對於Java來說，這是小事一樁，因為虛擬機會在後臺運行碎片收集程序。這使
得程序員輕鬆不少。但在另一方面，這也影響了應用程序的執行效率。如果沒有編寫析
構器，可能會在清除代碼執行時導致一個邏輯錯誤。
·OP：在Object Pascal中，沒有類似的碎片收集機制。但是Delphi組件支持一種新概念
，屬主對象。屬主對象將對所有下屬組件的銷燬負責。這就使對象銷燬變得簡單明瞭。

定義新的類
·特性描述：我們已經瞭解瞭如何創建已存在的類的實例（對象），我們新的議題是類
的定義。簡單說來，一個類是一個方法的集合，而方法是定義在一些局部數據上的操作
。
·C++：下面是一個簡單類的C++定義：
  class Date {
    private:
      int dd;
      int mm;
      int yy;
    public:
      void Init(int d, int m, int y);
      int Day();
      int Month();
      int Year();
  };
下面是其中一個方法的定義：
  void Date::Init(int d, int m, int y)
  {
    dd = d;
    mm = m;
    yy = y;
  }
·Java：Java的語法與C++語法類似：
  class Date {
    int dd = 1;
    int mm = 1;
    int yy = 1;
    publlic void Init(int d, int m, int y) {
      dd = d; mm = m; yy = y; }
    public int Day () { return dd; }
    public int Month () { return mm; }
    public int Year () { return yy; }
  }
兩者之間最大的不同在於Java的方法代碼在聲明的同時就定義了（與C++不同，這並不表
示這些函數是內聯函數），並且可以同時初始化類的數據成員。事實上，如果你沒有初
始化這些數據成員，Java會將所有數據成員初始化為默認值。
·OP：在Object Pascal的類聲明語法更接近C++語法，但是仍有很多區別：
  type
    Date = class
    private
      dd, mm, yy: Integer;
    public
      procedure Init (d, m, y: Integer);
      function Month: Integer;
      function Day: Integer;
      function Year: Integer;
    end;
  procedure Date.Init (d, m, y: Integer);
  begin
    dd := d;
    mm := m;
    yy := y;
  end;
  function Date.Day: Integer;
  begin
    Result := dd;
  end;
你可能注意到一些語法上的區別：定義方法使用兩個不同的關鍵字function和procedur
e，沒有參數的方法不使用圓括號，方法在類定義中聲明，之後再作定義（就像C++中經
常遇到的情況一樣）。注意，Pascal使用點運算符，而C++使用作用域操作符（::）。
·注意：訪問當前對象。OOP語言的方法與全局函數不同，它包含了一個隱藏參數——一
個指向當前被操作對象的指針或引用。在不同的語言中，這個參數的名字不同，在C++和
Java中是this，在Object Pascal中是self。
構造函數（constructor）
·特性描述：上文所述的類實在太簡單了。為了解決對象初始化的問題，我們要為類增
加一個構造函數，這也是改進類所需邁出的第一步。
·C++：在C++以及Java中，構造函數和類具有相同的名字。如果你沒有定義構造函數，
編譯器會自動為類添加一個默認構造函數。在這兩種語言中，你的類可以具有多個構造
函數，這要感謝“方法重載”。
·Java：在Java中，雖然構造函數也被稱為初始化函數（initializer），但與C++的構
造函數在使用上沒有什麼區別。需要注意的是，Java虛擬機負責創建對象，而構造函數
只對創建的對象進行初始化（Object Pascal也有類似的情況）。
·OP：在Object Pascal中，構造函數以一個特殊的關鍵字——constructor聲明。在OP
中沒有方法重載（？，沒有嗎？——譯者），不過因為構造函數（在Delphi的書中通常
成為構造器——譯者）的名字可以任意指定，所以你可以提供幾個名字不同的構造函數
。OP中每個類都有默認的構造函數“Create”，除非你用名字相同而參數不同的構造函
數將其覆蓋。這個構造函數繼承自一個通用基類，下面我們會提到。
析構函數和finalize()
·特性描述：析構函數扮演了構造函數反面的角色，通常在對象銷燬時被調用。如果說
大多數類都需要構造函數，那麼只有很少的類需要析構函數。一個析構函數的基本功能
就是釋放構造函數（以及對象生存期中的其它方法）分配的資源。這些資源包括內存、
文件、數據庫表、Windows句柄，等等。
·C++：C++的析構函數在對象超出作用域時，或者刪除動態創建對象時自動被調用。每
個類只能由一個析構函數。
·OP：Object Pascal的析構函數與C++的析構函數類似。Object Pascal使用標準虛擬析
構函數，稱為“Destroy”。析構函數通過標準“Free”方法調用。因為所有對象都是動
態創建的，所以你或者對象的屬主必須調用對象的析構函數，以釋放資源。理論上你可
以定義多個析構函數，不過只有你手動調用析構函數才有些價值（沒有什麼是自動完成
的）。
·Java：Java沒有析構函數。沒有引用的對象將被碎片回收程序在後臺銷燬。在銷燬對
象之前，碎片回收程序調用finalize()方法。但是，並沒有什麼保證這個函數真正被調
用（至少在Java 1.0中時是這樣）。因此，如果你需要釋放資源，你就要定義一個方法
，並保證它被調用。
類封裝（Private和Public）
·特性描述：這三種語言提供了相同的三種訪問限定符來提供不同級別的類封裝：publ
ic，protected和private。public意味著對於任何類都是可見的，protected意味著對於
派生類可見，private意味著沒有外部可見性。但是三種語言的實現細節並不相同。
·C++：在C++中，你可以使用friend關鍵字跳出類封裝。由class關鍵字聲明的類默認可
見性是private，由struct關鍵字聲明的類默認可見性是public。
·OP：在Object Pascal中，private和protected關鍵字只對在不同單元中的類有作用。
在同一單元（源代碼文件）聲明的類彼此之間可以自由訪問。Delphi還有兩個特殊的訪
問限定符：published和automated。published將為類的成員建立RTTI（運行期類型信息
），automated用於OLE自動化接口（已廢棄——譯者）。
·Java：在Java中，一個語法上的區別是每一個類成員都要用訪問限定符聲明。另一個
實質上的區別是，Java中類成員默認訪問限定符是friendly，因此對同一個包（源代碼
文件，類似於OP的單元）中的所有類都是可見的。同樣，protected關鍵字表示類成員對
派生類可見，同時也對同一個包中的其它類可見，而private protected才對應於C++中
的protected。
文件、單元和包
·特性描述：這三種語言的一個重要區別是對源代碼文件的組織管理。它們都使用文件
作為儲存源代碼的標準機構（與其它OOP語言如Smalltalk不同），不同的是C++的編譯器
並不真正瞭解文件，而OP和Java則不同，它們使用模塊概念來管理文件，雖然各自的名
字不太一樣。
·C++：在C++中，程序員們一般把類定義放在頭文件中，而把方法實現放入獨立的代碼
文件。通常這兩個文件會具有相同的文件名和不同的擴展名。一個編譯單元應該包括它
自己的聲明文件及其代碼所涉及的類及函數的聲明文件。但這僅僅是慣例，編譯器並不
強迫這樣做。鏈接器將不得不做更多的工作，因為編譯器無法預料一個方法是否在某個
模塊中被定義。
·OP：在Object Pascal中，源代碼文件被稱為單元（unit）。單元被分為接口（inter
face）和實現（implementation）兩部分。接口部分包含了類的定義（包括方法的聲明
），實現部分則包含了聲明於接口部分的方法的定義。在接口中編寫執行代碼是非法的
。你可以使用uses子句包含其它文件，以便引用其中聲明的類、方法等等。下面的代碼
包含了一些編譯單元的接口：
uses
  Windows, Form, MyFile;
·Java：在Java中，每個源代碼文件，或者說編譯單元之間是完全獨立的。你可以把一
組編譯單元作為一個包的一部分。與其它兩種語言不同，在聲明類的同時要編寫方法實
現的代碼。當使用import子句包含一個文件時，編譯器只讀入它的public聲明，而不是
所有的代碼：
import where.myclass;
import where.* // all the classes
·注意：關於被稱為名字空間的模塊。另一個關鍵性的區別是Java和OP的編譯器可以讀
入一個已編譯文件，並從中提取它的定義，就像你從已編譯代碼中提取頭文件一樣。另
一方面，C++語言引用名字空間（namespace）來彌補沒有模塊結構的不足。在Java和OP
中，事實上，通常以模塊的名字為前綴來解決名字之間的衝突。使用名字空間也可以達
到同樣的效果，不過它是內建在語言中的。
類/靜態方法和數據成員
·特性描述：通常OOP語言允許某些方法和數據成員與整個類相關，而不是對象個體。一
般的類方法可以通過類的單個對象或類調用。類數據成員是被所有對象共享的數據成員
，而不是為每個對象單獨創立。
·C++：在C++中，類方法和類數據成員以static關鍵字聲明。類數據成員必須使用一個
特殊的聲明來初始化，這是缺少模塊結構的不足之一。
·OP：OP中只有類方法，使用class關鍵字聲明。而定義於同一單元中的私有全局變量可
以發揮類數據成員的作用。
·Java：Java使用和C++相同的關鍵字static。靜態方法經常被使用（甚至有些過分），
這是因為在Java中沒有全局函數。靜態數據成員可以直接在類聲明中初始化。
類和繼承
·特性描述：類的繼承是OOP的根基之一。它可以用來做一般化表述和特殊化表述。關於
繼承的基礎思想是通過修改或擴展現存的類型建立新的類型，換句話說，一個派生類具
有基類的所有數據成員和方法，並添加了新的數據成員和方法，還有可能修改某些以存
在的方法。不同的OOP語言用不同的名詞描述這種機制（derivation，inheritance，su
bclassing）、被繼承的類（基類，父類，超類）和繼承的類（派生類，子類，次類)。

·C++：C++使用public、protected和private關鍵字定義繼承的方式，改變繼承的方法
和數據成員的訪問限定類型。雖然public繼承最常被使用，但在C++中默認的是private
繼承。C++是這三種語言中唯一允許多重繼承的語言，以後我們還會提到。下面是一個例
子：
class Dog: public Animal {
...
};
·OP：Object Pascal使用一個特殊的語法表述繼承，而不是使用關鍵字，方法是將基類
名放入括號中，添加到類聲明中。OP只支持C++中所謂public的繼承。OP類具有一個通用
基類，以後我們會見到。
type
  Dog = class (Animal)
    ...
  end;
·Java：Java使用extends關鍵字來表述唯一一種繼承類型，對應於C++中的public繼承
。Java不支持多重繼承。Java類同樣具有一個通用基類。
class Dog extends Animal {
...
}
·注意：關於基類的構造函數和初始化。在C++和Java中，基類的構造函數具有很複雜的
結構。在OP中，初始化基類則是程序員的責任。這個主題比較複雜，所以我不打算進一
步講述。我會把注意力集中在通用基類、基類訪問、多重繼承、接口、後期綁定以及其
它相關的內容。
所有類的祖先
·特性描述：在一些OOP語言中，所有類都直接或間接的派生自某個特定的基類。這個類
（通常被稱為Object或其它類似的名字）具有所有類共有的基本功能。事實上，所有類
都繼承自這個基類。因為最初在Smalltalk中便是如此設計的，所以大多數OOP語言採用
了這個概念。
·C++：雖然在C++中沒有這個概念，但許多應用程序框架引入了通用基類的概念。MFC是
個很好的例子，它有一個CObject類。事實上，最初這是十分意義的，因為語言不具有模
板特性（以及多重繼承特性）。
·OP：每個類都自動的繼承自TObject類。因為OP不支持多重繼承，所以所有的類構成了
一個巨大的派生樹。TObject類可以處理RTTI，同時具有其它一些能力。
·Java：如同OP一樣，所有的類繼承自Object類。這個基類也具有一些有限的功能。
訪問基類的方法
·特性描述：當編寫一個類方法或者重載一個基類方法時，你經常需要引用基類的方法
。而如果方法在派生類中重新被定義，那麼使用方法的名字將調用新方法。OOP語言使用
不同的技術或關鍵字解決訪問基類方法的問題。
·C++：在C++中可以使用範圍操作符（::）引用一個特定的類。你不僅可以訪問基類，
甚至可以訪問繼承鏈中更高層的類。
·OP：Object Pascal使用一個特殊的關鍵字完成同樣的工作：inherited。在關鍵字後
可以加上需要調用的基類方法的名稱，或者（在某些情況下），簡單的使用這個關鍵字
來訪問對應的基類方法。
·Java：Java中使用super關鍵字完成類似的工作。在Java和OP中，你無法訪問更高一級
的基類。看起來這似乎限制了什麼，但是這樣可以通過添加中間類來擴展繼承鏈。同時
，如果你不需要基類的功能，你也許可以不從這個基類派生你的新類。
子類兼容性
·特性描述：並不是所有OOP語言都是強類型的，就像我開始提到的，但是這裡我們涉及
的三種語言都是。這意味著不同類的對象之間是不兼容的。只有一個例外，就是派生類
的對象與基類是兼容的（注意：反過來不成立）。
·C++：在C++中，子類兼容性規則只適用於指針和引用，對普通對象則不適用。事實上
，不同的對象在所佔用的內存不同，所以你不能將相同的內存分配給不同的對象。
·OP：子類兼容性適用於所有對象，因為OP採用了對象參考模型。此外，所有對象都與
TObject類型兼容。
·Java：Java的情況與OP完全相同。
·注意：多態性。如同下一節將要描述的，子類兼容性對於實現後期綁定和多態性是十
分重要的。
後期綁定（及多態性）
·特性描述：當繼承鏈中不同的類分別重新定義了它們基類的方法，那麼如果能夠通過
一個兼容這些類的對象（感謝子類兼容性）調用合適的類的方法，將是十分有用的。要
完成這個工作，編譯器需要支持後期綁定，它將不產生一個特定的函數調用，而是在運
行期決定了對象的真正類型後，才進行函數調用。
·C++：在C++中，後期綁定只應用於虛擬方法（在調用速度上會有所減慢）。一個在基
類中定義的虛擬方法將在它被重新定義時保持這種特性（當然方法的聲明必須完全匹配
）。一般情況，非虛擬方法並不允許後期綁定。
·OP：在Object Pascal中，後期綁定通過關鍵字virtual或dynamic引入（這兩個關鍵字
的區別僅在於技術實現的不同）。在派生類重新定義方法時，應使用override關鍵字（
這樣就強迫編譯器檢查方法聲明是否匹配）。這是OP中特有的，它允許在基類做更多的
改動。
·Java：在Java中，所有的方法都使用後期綁定，除非你使用final關鍵字。final方法
不能被重新定義，在調用速度上更快。在Java中正確的方法名稱對於多態性的實現是非
常重要的。Java中默認後期綁定和C++中默認前期綁定這一事實表明了這兩種語言不同的
針對性：C++有時會犧牲OOP模型以獲取性能的提升。
·注意：構造函數和析構函數的後期綁定。與其它兩種語言相反，Object Pascal允許定
義虛擬構造函數。而這三種語言都支持虛擬析構函數。
抽象方法和抽象類
·特性描述：當建立一個複雜的繼承鏈時，為了實現多態性，經常需要為更高級的類引
入一些方法，雖然這些方法未必是為這個類抽象概念而定義的。除了使用空方法定義，
許多OOP語言實現了一種特殊的機制：定義抽象方法。所謂抽象方法就是沒有實現的方法
。具有一個或多個抽象方法的類稱為抽象類。
·C++：在C++中，抽象方法被稱為純虛函數，通過在方法定義後添加所謂虛定義符（=0
）可以獲得一個抽象方法。抽象類就是具有（或繼承了）一個或多個抽象方法的類。不
能創建抽象類對象。
·OP：Object Pascal使用abstract關鍵字聲明抽象方法。同樣，抽象類就是具有或繼承
了抽象方法的類，但是你可以創建抽象類的實例（雖然編譯器會產生一個警告信息）。
這就隱含了調用抽象方法的危險，在運行期，這樣會產生一個運行期錯誤，並會終止程
序的運行。
·Java：在Java中，抽象方法和抽象類都用abstract關鍵字聲明（事實上Java中的抽象
類必須具有抽象方法，好像有一點多餘）。同樣，派生類如果沒有重新定義所有的抽象
方法，必須使用abstract關鍵字定義為抽象類。不能創建抽象類的實例。
多重繼承和接口
·特性描述：一些OOP語言允許從多個基類派生新類。另一些語言只允許從一個類中派生
新類，但是可以從多個接口（或者純抽象類，只由純虛函數構成的類）派生新類。
·C++：C++是三種語言中唯一支持多重繼承的。一些程序員認為這是一件好事，另一些
程序員認為這是一件壞事，我不想過多的討論這個問題。多重繼承產生了很多新概念，
比如說虛基類，雖然功能強大，但並不好掌握。C++沒有接口的概念，雖然它與多重繼承
的純抽象類概念接近（接口可以看作多重繼承的子集）。
·Java：Java，以及Object Pascal，都不支持多重繼承，但是完全支持接口。接口的方
法支持多態性，並且當需要一個接口對象時，可以通過一個對象實現接口。一個類只能
繼承自一個基類，但可以implement（關鍵字）多個接口。Java的接口與COM模型非常吻
合，雖然沒有預先的考慮。舉個例子：
public interface CanFly {
public void Fly();
}
public class Bat extends Animal implements CanFly {
public void Fly( ) { // the bat flies... }
}
·OP：Delphi 3在Object Pascal中引入了類似Java的接口，這些接口非常吻合COM（雖
然技術上經常在非COM程序中使用）。接口構造了一個與類獨立的繼承鏈，但是與Java一
樣，一個類可以繼承自唯一的基類並實現多個接口。將類的方法映射為類實現的接口的
方法是Object Pascal語言中令人迷惑的幾個問題中的一個。
RTTI
·特性描述：在強類型OOP語言中，編譯器完成所有類型檢查的工作，所以很少需要運行
程序保存類型的信息。然而，某些情況下需要某些類型信息。因此，這三種OOP語言都或
多或少的支持運行期類型識別/信息（RTTI）。
·C++：最初的C++語言不支持RTTI。後來通過dynamic_cast的方式提供了部分的類型信
息。你可以查詢一個對象的類型，也可以檢查兩個對象是否具有相同的類型。
·OP：Object Pascal以及它的可視開發環境支持也需要大量的RTTI。不僅可以進行類型
檢查（使用is和as操作符），類也為它的published成員生成大量的RTTI。事實上這個關
鍵字負責部分RTTI的生成。屬性、流結構（窗體文件以及始於對象觀察器的Delphi環境
很大程度上依賴於類的RTTI。TObject類具有ClassName和ClassType方法。ClassType方
法返回一個類類型變量——一個特殊類參考類型的實例（並不是類本身）。
·Java：和Object Pascal一樣，Java中也有一個基類用於跟蹤類型信息。Object類的g
etClass()方法會返回一個元類（一個用於描述類的類型的對象），你也可以使用getNa
me()函數獲得一個類名字符串。你還可以使用instanceof操作符。Java 1.0不支持更多
內容的RTTI，但在未來的版本中可能會改變，以適應可視環境和組件的開發（所謂Java
 Beans）。
·例子：
// C++
Dog* MyDog = dynamic_cast <Dog*> (myAnimal);
// Java
Dog MyDog = (Dog) myAnimal;
// Object Pascal
Dog myDog := myAnimal as Dog;
異常處理
·特性描述：異常處理構想的出發點是簡化程序的錯誤處理代碼，提供標準內建機制，
從而使程序更加健壯。異常處理的內容很多，這裡我只是簡述一些關鍵的要素和區別。

·C++：C++使用throw關鍵字來產生一個異常，用try關鍵字標誌被保護的程序塊，用ca
tch關鍵字標誌異常處理程序代碼。異常是一些特殊類的對象，在這三種語言中都構成了
各自的繼承鏈。C++會對所有棧中的對象進行棧展開和銷燬（調用析構函數）。
·OP：Object Pascal使用與C++類似的關鍵字raise，try和except，並且具有類似的功
能。唯一真正的區別是因為沒有對象會被創建於棧中，所以不會發生棧展開。另外，你
可以使用一個finally關鍵字，標誌那些無論是否產生異常都被執行的代碼。在Delphi中
，異常類全部派生自Exception。
·Java：Java使用和C++相同的關鍵字，但是其行為卻更接近於Object Pascal，包括使
用finally關鍵字。所有采用對象引用模型的語言基本都是如此。碎片回收程序的存在限
制了finally關鍵字對類的應用，這些類不僅佔用了內存資源。Java認為所有能產生異常
的函數都具有一個正確的異常子句，這個子句告訴Java哪些異常可能會被產生。這個假
設十分嚴格，並由編譯器進行檢查。這是一個非常有用的技術，即使這意味著程序員要
做更多的工作。Java中的異常類必須派生自Throwable類。
模板（通用程序設計）
·特性描述：在不指定某些數據類型的情況下編寫函數和類的技術，稱為通用程序設計
。在函數或類被使用的時候，特定的數據類型會代替函數或類中的未指定部分。所有情
況都在編譯器的監管之下，不會有任何問題遺留給運行期來決定。模板類的一個典型的
例子就是容器類。
·C++：這三種語言中只有C++具有通用類和函數，這些類和函數用Template關鍵字表示
。C++標準包含了一個巨大的模板類庫，稱為STL，用於支持一些特殊而有用的程序設計
功能。
·OP：Object Pascal不支持模板。容器類通常被創建為TObject類對象的容器。
·Java：Java同樣不支持模板。你可以使用對象容器，或採用其它類似的方法。
其它特殊特性
·特性描述：以下是其它一些我談及的特性，它們不是基礎特性，而且僅為一種語言所
特有。
·C++：我已經提到了多重繼承、虛基類和模板。還有一些另外兩種語言所不具有的特性
。C++支持操作符重載，而Java中支持方法重載。C++還允許程序員重載全局函數。你甚
至可以重載類運算符，編寫可能會在後臺被調用的類型轉換方法。C++的對象模型需要拷
貝構造函數和賦值運算符重載，而其它兩種語言則不需要，因為它們基於對象引用模型
。
·Java：只有Java在語言中支持多線程。對象和方法支持同步機制（使用synchronized
關鍵字）：同一個類的兩個synchronized方法不能同時運行。要創建一個新的線程只需
從Thread類中派生新類，並覆蓋run()方法。另一個方法是實現Runnable接口（這是建立
多線程applet的常用方法）。我們已經討論過了碎片回收程序。Java的另一個關鍵特性
是代碼兼容性，但是這並不是嚴格的與語言相關的。
·OP：Object Pascal的一些特性包括類引用，便利的方法指針（這是事件模型的基礎）
，特別是屬性。屬性用來隱藏對數據成員的訪問，這些訪問大多是通過方法進行的。屬
性可以直接映射為對數據成員的讀寫操作，也可以映射為訪問函數。即使改變了訪問數
據成員的方式，也不需要改變調用的代碼（雖然需要重新編譯），這使得屬性稱為了一
個強大的封裝特性。Java也將在1.1版中加入這個特性，以支持Java Beans。
標準
·特性描述：每個語言都需要有人建立一個標準，並檢查是否所有的實現都符合這個標
準。
·C++：ANSI/ISO C++標準委員會已經完成了標準化工作。大多數編譯器編寫者都努力遵
守這個標準，雖然還有很多的差異存在。理論上的發展已基本停止。但在實現上，新的
Borland C++ Builder雖然並不很成熟，但使很多人認識到C++迫切的需要一個可視開發
環境。同時，廣為流行的Visual C++將C++向另一個方向發展起來，例如，大量使用宏。
我的意見是，每個語言都有它的開發模型，在不適於某種語言的環境下強行使用這種語
言是毫無意義的。
·OP：Object Pascal是一個私有語言，所以沒有標準。Borland已經授權給一些OS/2編
譯器開發商，但是沒有什麼效果。在每一個新版本的Delphi中，Borland都擴展了這種語
言。
·Java：Java也是私有語言，並且擁有一個同名的商標。但是Sun更願意授權給其它編譯
器開發商。Sun自己控制著這種語言，並且好像並不想為其建立一個官方的標準，至少目
前如此。Sun也在極力避免不遵守標準的虛擬機被開發出來。
結論：語言和開發環境
就像我上面提到過的，雖然我盡力做到只比較語言的語法語義特性，但在適當的環境中
考察它們是很重要的。這些語言為不同的目標開發出來，是為了以不同的途徑解決不同
的問題的，並在不同的開發環境中被應用。雖然語言和它們的開發環境體現了彼此的一
些特性，但它們是為了滿足不同的需要而建立的，就像我們在對比這些特性時看到的那
樣。C++的目標是強大的功能和控制能力，代價是複雜性提高；Delphi的目標是在不損失
太多功能的情況下，儘可能簡單以及可視化編程和同Windows緊密結合；Java的目標是兼
容性和分佈式應用，為此不惜犧牲一些運行速度。
決定這三種語言命運的並不是我這篇文章中所涉及的那些語言特性。Borland的財政狀況
，Microsoft對操作系統的控制，Sun在Internet世界的聲望（許多人認為的反微軟），
Web瀏覽器和Win32 API的前景，ActiveX（以及Delphi的ActiveForms）將扮演的角色，
這些都是影響你選擇的因素（往往超過了技術因素）。例如那個非常優秀的語言Eiffel
——Object Pascal和Java都從中吸取了很多靈感，沒有搶到任何市場份額，雖然它在全
世界的許多大學中都十分流行。
記住，“時髦”這個詞已經在計算機世界佔有了前所未有的地位。就像用戶喜歡使用今
年新版本的軟件（這大概就是為什麼操作系統都以年份命名），程序員們也喜歡用最新
的程序設計語言，並希望第一個掌握它。我們可以說“Java並不是最新的OOP語言”，在
未來的幾年裡，一些人會開發出更時髦的語言，而其他人則會蜂擁而上，全然忘記了這
個世界上大多數程序員還在他們的鍵盤上敲打著傳統的Cobol語句！
作者簡介
Marco Cantu撰寫過多本涉及以上談及的兩到三種語言的書，如Object Pascal and C++
，並在美國和其它一些國家發行。他為多家雜誌撰寫稿件，並在他的公司WinTech Ital
ia中進行多項OOP語言和Windows程序設計的培訓。他喜歡在國際性會議中發表講話。你
可以在以下網址找到他：www.macrocantu.com。

--

消融，消融，
      融入你那柔波似的心胸！！！！
                                    
※ 來源:·日月光華 bbs.fudan.edu.cn·[FROM: 10.22.10.100]
--
※ 轉載:·日月光華 bbs.fudan.edu.cn·[FROM: 10.100.110.101]

 

--------------------------------------------------------------------------------
[返回上一頁] [本討論區]