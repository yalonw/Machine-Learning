日月光華 -- SE精華區文章閱讀
--------------------------------------------------------------------------------
 發信人: jiachong (甲蟲), 信區: SE
標  題: [轉載]5.從OOP到AOP                           jiachong 
發信站: 日月光華 (2003年04月09日12:48:08 星期三), 站內信件

【 以下文字轉載自 SE 討論區 】
【 原文由 jiachong 所發表 】
從OOP到AOP
    面向對象技術很好地解決了軟件系統中角色劃分的問題。藉助於面向對象的分析、
設計和實現技術，開發者可以將問題領域的“名詞”轉換成軟件系統中的對象，從而很
自然地完成從問題到軟件的轉換。面向對象的編程方式（OOP）使我們可以把系統看作是
一批相互合作的對象。類允許我們把實現細節隱藏在接口下。多態性為相關概念提供公
共的行為和接口，並允許特定的組件在無需訪問基礎實現的前提下改變特定行為。
    但是OOP不能很好地處理橫越多個模塊的行為。例如需要對系統中的某些方法進行日
志記錄，這種需要記錄方法散佈在40多個類中。最直接的辦法就是：創建一個超類（或
接口），將日誌的功能放在其中，並讓所有需要日誌功能的類繼承這個超類（或接口）
。這樣大的修改量，無疑會增加出錯的機率，並且加大系統維護的難度。
    因此， 面向方面的編程（A s p e c t - O r i e n t e d Programming，AOP）應
運而生。AOP為開發者提供了一種描述橫切關注點的機制，並能夠自動將橫切關注點織入
到面向對象的軟件系統中，從而實現了橫切關注點的模塊化。通過劃分Aspect代碼，橫
切關注點變得容易處理。開發者可以在編譯時更改、插入或除去系統的Aspect，甚至重
用系統的Aspect。更重要的是，AOP可能對軟件開發的過程造成根本性的影響。我們可以
想象這樣一種情況：OOP只用於表示對象之間的泛化-特化（generalization-specializ
ation）關係（通過繼承來表現），而對象之間的橫向關聯則完全用AOP來表現。這樣，
很多給對象之間橫向關聯增加靈活性的設計模式（例如Decorator、Role Object等）將
不再必要。
    目前AOP已經有了Java語言的實現——AspectJ。這個工具提供了一整套的語法，能
夠清楚地描述橫切關注點，並將其織入到Java源代碼中。織入後的代碼仍是標準Java代
碼，因此AspectJ不會影響Java的移植能力。關於AspectJ，讀者可以在http://www.asp
ectj.org找到更多的信息。

--Amineer整理
--
這個世界總會有點不公正
但是我們總能用心去平衡
※來源:·日月光華 bbs.fudan.edu.cn·FROM:[甲蟲窩]
※ 修改:·jiachong 於 03月04日20:51:20 修改本文·[FROM: 218.79.59.90]
--
※ 轉載:·日月光華 bbs.fudan.edu.cn·[FROM: 61.170.202.109]

 

--------------------------------------------------------------------------------
[返回上一頁] [本討論區]